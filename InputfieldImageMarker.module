<?php namespace ProcessWire;

/**
* InputfieldImageMarker for ProcessWire.
*
* This Inputfield is a GUI for FieldtypeImageMarker.
*
* @author Francis Otieno (Kongondo) <kongondo@gmail.com> kongondo.com [Code]
* @author Helder Cervantes (heldercervantes) [Fiedltype Concept, JS, HTML, CSS]
* 
* @credits Ryan Cramer: Code heavily adpated from his InputfieldEvents. 
* @credits Roland Toth: HTML & CSS.
*
* Lincensed under MIT.
*
* https://github.com/kongondo/FieldtypeImageMarker
* Created December 2015
* 
* ProcessWire 3.x
* Copyright (C) 2016 by Ryan Cramer
* Licensed under MPL 2, see LICENSE.TXT
*
* http://www.processwire.com
*
*/

class InputfieldImageMarker extends Inputfield {

	public static function getModuleInfo() {
		return array(
			'title' => 'Image Marker',
			'version' => 11,
			'author' => 'Francis Otieno (Kongondo), Helder Cervantes',
			'href' => 'https://processwire.com/talk/topic/11863-module-imagemarker-fieldtype-inputfield/',
			'summary' => 'Image Marker: GUI (Inputfield) for FieldtypeImageMarker.',
			'requires' => 'FieldtypeImageMarker', 
			);
	}

	const IM_PREFIX = 'image_marker_';

	/**
	 * string name of the cookie used to save total number of coordinates' table rows to show per page when pagination in use.
	 *
	 */
	private $cookieName;// @TODO...ARE WE USING THIS?

	/**
	 * object the page containing the IM for editing.
	 *
	 * Helps distinguish between normal vs editing in a repeater page.
	 * 
	 */
	private $imageMarkerPage;

	/**
	 * int value of number of coordinates' table rows to show per page when pagination in use.
	 *
	 */

	protected $page;
	protected $field;


	public function setPage(Page $page) {
		$this->page = $page;
		$this->setImageMarkerPage();
		
	}

	public function setField(Field $field) {
		$this->field = $field;
	}	

	/**
	 * Render the entire input area for ImageMarkers.
	 *
	 * @access public
	 * @return string $out Markup of inputfield.
	 * 
	 */
	public function ___render() {
	

		// @note: we have set the IM page in setPage()

		#################

		$out = '';		

		// name of the single file field containing the base image on this page
		// the class property was set in FieldtypeImageMarker getInputfield()
		$baseImageFile = $this->baseImageFile;

		// check if a valid file field was specified + if it is not empty
		$valid = $this->isValid($baseImageFile);// returns array
		$validBaseFile = (int) $valid['valid'];
		// no field specified, field not found or field of wrong type
		if($validBaseFile === 0) return $this->field->error($valid['error']);
		// empty file field
		elseif($validBaseFile === -1) {
			// message to show if base image has been left empty (generic just in case nothing saved yet in $this->emptyBaseImageMessage)
			$emptyBaseImageMessage = $this->emptyBaseImageMessage ? $this->emptyBaseImageMessage : $this->_('Image Marker: Missing base image.');
			#$emptyBaseImageMessage = $this->emptyBaseImageMessage;
			$out = '<h4>' . $emptyBaseImageMessage . '</h4>';
			return $out;
		}

		// optional(?) selector for finding info pages
		$infoPagesSelector = $this->infoPagesSelector;// this property was set in FieldtypeImageMarker getInputfield()

		// pagefield for selecting (info) pages to add as markers
		$defaultPageSelect = $this->defaultPageSelect;// this property was set in FieldtypeImageMarker getInputfield()

		// info pages label in coordinates table
		$infoPageLabel = $this->infoPageLabel ? $this->infoPageLabel : $this->_('Information Page');
		// horizontal and vertical axes labels (x and y respectively)
		$xLabel = $this->xCoordinateLabel ? $this->xCoordinateLabel : $this->_('X-Coordinate');
		$yLabel = $this->yCoordinateLabel ? $this->yCoordinateLabel : $this->_('Y-Coordinate');
	
		// base image + markers markup
		$out = '<div class="fieldContainer">';
		$out .= $this->renderBaseImage($baseImageFile);      
 
        // markers
      	$markers = '';
		// table body
		$tbody = ''; 
		
		// render rows for existing ImageMarkers	
		foreach($this->attr('value') as $cnt => $imageMarker) {
			$markers .= $this->renderMarkers($imageMarker, $cnt);
			$tbody .= $this->renderRow($imageMarker, $cnt); 
		}

		$out .= $markers;
		$out .= '</div>';// end div.fieldContainer

		$out .= $this->renderPageSelect();
		$out .= $this->coordinatesTablePaginationSelect();

		$tableID = self::IM_PREFIX . "coord_table_{$this->name}";

		$out .= "
		<table id='{$tableID}' class='InputfieldImageMarkers sortable'>
			<thead>
			<tr class=''>
				<th class='ImageMarkerInfo'>" . $infoPageLabel . "</th>
				<th class='ImageMarkerCoords_X'>" . $xLabel . "</th>
				<th class='ImageMarkerCoords_Y'>" . $yLabel . "</th>
				<th class='ImageMarkerDel'>
					<a title='Delete All' href='#' class='ImageMarkerDel'><span class='ui-icon ui-icon-trash'></span></a>
				</th>
			</tr>
			</thead>
			<tbody>
			$tbody
			</tbody>
		</table>
		";

		// wrap it all up
		$out = "<div class='image_marker_main_wrapper' data-im-field='{$this->name}'>{$out}</div>";
		
		return $out; 

	}

	/**
	 * Set the IM page. We check if in normal ProcessPageEdit vs Repeater.
	 *
	 * Allows us to get the base image correctly.
	 * 
	 * @access public
	 * 
	 */
	public function setImageMarkerPage() {
		
		// set the IM page. We check if in normal ProcessPageEdit vs Repeater	
		//$process = $this->wire('process');

		// first, we check if our vps inputfield is in a repeater
		preg_match('/(_repeater[0-9]+)$/', $this->name, $match);
		// if in a repeater, we adjust our 'current' page accordingly => it will be the repeater page
		// that's where our items will live for this page
		if(count($match)) {
			$repeatPageID = (int) str_replace('_repeater', '', $match[0]);
			$this->imageMarkerPage = $this->wire('pages')->get($repeatPageID);
		}
		// normal 
		// @note: no need for this; we already got the normal page in FieldtypeImageMarker::getInputfield()
		/* elseif($process && $process->className() == 'ProcessPageEdit') {
			$this->imageMarkerPage = $process->getPage();// get the page being edited			
		} */

		// normal page
		// @note: $this->page was set in FieldtypeImageMarker::getInputfield()
		else $this->imageMarkerPage = $this->page;

	}


	/**
	 * Load Asm and Autocomplete for repeaters
	 *
	 * @note: not using currently. Not very efficient if always loading + have no access to $this->field
	 * 
	 * @access public
	 * 
	 */
	/* public function loadRepeaterResources() {

		// styles and scripts
		$config = $this->wire('config');

		// if we are using page autocomplete inputfield to find info pages
		if(2 == $this->field->defaultPageSelect) {
			$url = $config->urls->InputfieldPageAutocomplete;
			$config->styles->add($url . "InputfieldPageAutocomplete.css");
			$config->scripts->add($url . "InputfieldPageAutocomplete.js");
		}
		// else we default to AsmSelect inputfield
		else {

			$url = $config->urls->InputfieldAsmSelect;
			$config->styles->add($url . "InputfieldAsmSelect.css");
			$config->styles->add($url . "asmselect/jquery.asmselect.css");
			$config->scripts->add($url . "InputfieldAsmSelect.min.js");
			$config->scripts->add($url . "asmselect/jquery.asmselect.min.js");

		}

	} */

	/**
	 * Render a table row for an individual ImageMarker input.
	 *
	 * @access private
	 * @return string $out Markup of rendered row.
	 * 
	 */
	private function renderRow(ImageMarker $imageMarker, $cnt, $class = 'ImageMarker') {
		
		//$name = $this->attr('name');
		$name = $this->name;
		$prefix = self::IM_PREFIX . $name;
		
		$info = (int) $imageMarker->info;
		$x = (int) $imageMarker->x; 
		$y = (int) $imageMarker->y;
		$label = $this->wire('sanitizer')->text($imageMarker->infoLabel);

		$i = $cnt + 1;

		$out = "
			<tr class='ImageMarker$cnt $class' data-marker='{$name}_marker_{$info}'>" .
				"<td>" .
					"<input type='hidden' name='{$prefix}_info[]' class='marker_info' value='{$info}'>" .
					"<span>$i $label</span>" .
				"</td>" .
				"<td>" .
					"<input type='text' name='{$prefix}_x[]' value='$x' class='coords_x' data-marker='{$name}_marker_{$info}_x'>" .
				"</td>" .
				"<td>".
					"<input type='text' name='{$prefix}_y[]' value='$y' class='coords_y' data-marker='{$name}_marker_{$info}_y'>" .
				"</td>" .
				"<td>" .
					"<a href='#' class='ImageMarkerDel ui-helper-clearfix'>".
						"<span class='ui-icon ui-icon-trash'></span>".
					"</a>" .
					"<input type='hidden' name='{$prefix}_del[]' value='0'>" .
				"</td>" .
			"</tr>";
		
		return $out;
		
	}

	/**
	 * Render markup for selecting info pages.
	 *
	 * @access private
	 * @return string $w->render() Markup of rendered InputfieldWrapper.
	 * 
	 */
	private function renderPageSelect() {

		$modules = $this->wire('modules');
		$prefix = self::IM_PREFIX . $this->name;

		$w = new InputfieldWrapper();
			
		$pagesSelector = "template!=admin, has_parent!=2, parent!=7, id!=27, limit=50";

		// if user specified (hence limited) the pages selectable for adding as markers, we append it to the default selector
		if($this->infoPagesSelector) $pagesSelector .=  ', ' . $this->infoPagesSelector;// @todo - trim?

		$description = $this->_('Select Pages to add as markers.');		
		$addInfoPagesSelect = 1;

		// if we are using page autocomplete inputfield to find info pages
		if ($this->defaultPageSelect == 2) {				
			$addInfoPages = $modules->get('InputfieldPageAutocomplete');
			$addInfoPages->set('findPagesSelector', $pagesSelector);
			$addInfoPages->notes = $this->_('Start typing to search for pages.');
			// we'll use this variable when saving PageAutocomplete values
			$addInfoPagesSelect = 2;
		}
		// else we default to AsmSelect inputfield
		else {
				
			// if using custom PHP code to return selectable pages
			if(strlen($this->findPagesCode)) $opts = $this->findPagesCode();
			// else we use the default || custom selector
			else $opts = $this->wire('pages')->find($pagesSelector);

			if(!count($opts)) {
				$this->error($this->_('Image Marker: Your selector did not find any selectable pages for your markers! Confirm its validity.'));
				$description = $this->_('Image Marker: No pages were found to add to add as markers. Rectify the specified error first.');
			}
			
			$addInfoPages = $modules->get('InputfieldAsmSelect');

			foreach($opts as $opt) $addInfoPages->addOption($opt->id, $opt->title);

		}

		// make it unique for multiple IMs on a page use
		$addInfoPagesID = $prefix . '_marker_add_infopages';

		$addInfoPages->attr('name+id', $addInfoPagesID);
		$addInfoPages->label = $this->_('Page Markers');		
		$addInfoPages->attr('class', 'marker_add_infopages');// @note: need for JS to loop through to disabled selected
		$addInfoPages->description = $description;

		$w->add($addInfoPages);// add page asmSelect/autocomplete to wrapper

		// hidden field to post value to specify if using PageAutocomplete OR AsmSelect to select info pages to add as markers
		// we use this to process added info pages
		$addInfoPagesSelectID = $prefix . '_marker_add_infopages_select';
		$h = $modules->get('InputfieldHidden');
		//$h->attr('name', 'marker_add_infopages_select');
		$h->attr('name+id', $addInfoPagesSelectID);
		$h->attr('value', $addInfoPagesSelect); 

		$w->add($h);//add hidden field to markup

		return $w->render();

	}

	/**
	 * Render markers (dots).
	 *
	 * Markers rendered according to selected marker style by applying related CSS class.
	 * Currently user can choose from 3 marker styles: circular (default), tear drop (gmap) and callout.
	 *
	 * @access private
	 * @param object $im Instance of this ImageMarker.
	 * @param object $cnt Integer numerical position of a single marker.
     * @return string $out Markup with a single marker's output.
     *
	 */
	private function renderMarkers($im, $cnt) {

		$i = $cnt + 1;
		$markerStyle = $this->markerStyle;			
		$markerLabel = $i;
		$title = $im->infoLabel;

		if($markerStyle == 1) $markerStyleClass = ' circle';
		elseif($markerStyle == 2) $markerStyleClass = ' teardrop';
		elseif($markerStyle == 3) {
			$markerStyleClass = ' callout';
			$markerLabel = $im->infoLabel;
			$title = $i;
		}

		$out = 
			"<div id='{$this->name}_marker_{$im->info}' class='marker{$markerStyleClass}' title='{$title}' style='left: {$im->x}%; top: {$im->y}%;' data-row='{$i}'>" .
				"<span>{$markerLabel}</span>" .
			"</div>";

		return $out;		
		
	}

	/**
	 * Render base image.
	 *
	 * @access private
	 * @param string $baseImageFile name of file field with base image.
     * @return string $out Markup with base image output.
     *
	 */
	private function renderBaseImage($baseImageFile) {
		$baseImage = $this->imageMarkerPage->$baseImageFile->first()->url;
		$out = '<img src="'. $baseImage . '" alt="" class="marker_base_image">';
		return $out;		
	}

	/**
	 * Checks for valid and non-empty file field with base image.
	 *
	 * @access private
	 * @param string $field name of file field with base image.
     * @return bool true|string $error.
     *
	 */
	private function isValid($field = '') {

		$valid = array();
		$error = '';		

		$valid['valid'] = 1;
		$valid['error'] = $error;

        // name of the single file field containing the base image on this page
		if(!$field) $error = $this->_('Image Marker: You have to specify a valid file field with a base image');
		else {

			// check if field exists
			$f = $this->wire('fields')->get($this->wire('sanitizer')->fieldName($field));
			
			if(!$f || !$f->id > 0)  $error = $this->_('Image Marker: The specified file field does not exist!');// no field
			elseif (!$f->type instanceof FieldtypeFile) $error = $this->_('Image Marker: The specified field is not valid. You need to specify the name of a single file field.');// wrong field type
			//elseif($page->$f->count < 1) $valid['valid'] = -1;
			elseif($this->imageMarkerPage->$f->count < 1) $valid['valid'] = -1;			
		}

		if($error) {
			$valid['valid'] = 0;
			$valid['error'] = $error;
		}

		return $valid;
		
	}

	/**
	 * Find pages to select as markers in AsmSelect using custom PHP code.
	 *
	 * Uses eval().
	 *
	 * @access private
	 * @return eval() of type Page or PageArray or null.
	 *
	 */
	private function findPagesCode() {

		$page = $this->page;
		//so that $page and $pages are locally scoped to the eval
		$process = $this->wire('process'); 
		if($process && $process->className() == 'ProcessPageEdit') $page = $process->getPage();

		$pages = $this->wire('pages');

		$findPages = eval($this->findPagesCode);

		//if eval() returns anything other than a Page or PageArray, return null
		if($findPages instanceof Page ) return $findPages->children;
		elseif($findPages instanceof PageArray ) return $findPages;
		else return null;

	}

	/**
	 * Determines and sets the user-selected numbere of rows per page in paginated coordinates' table.
	 *
	 * Gets cookie set in js.
	 *
	 * @access private
	 * @return string|int $showRows pre-selection for select controlling number of rows per page in paginated coordinates' table.
	 *
	 */
	private function coordinatesTablePaginationLimit() {
		// js cookie to remember last selected for session
		$cookieName = self::IM_PREFIX . "coord_table_{$this->name}";
		$showRows = $this->wire('input')->cookie->$cookieName;
		return $showRows;		
	}

	/**
	 * Return number of coordinates' table rows to show per page when using pagination.
	 *
	 * @access private
	 * @return string $limitSelect Markup for selecting number of table rows to display per page in pagination mode.
	 *
	 */
	private function coordinatesTablePaginationSelect() {

		$lastLimit = $this->coordinatesTablePaginationLimit();

		// prepare values for 'Show XX Posts', i.e. number of posts to show per page in posts dashboard
		$limitSelect = '';
		$limitSelect .=
			"<div class='pagination_wrapper'>".
				"<span class='limit_select'>" . 
					$this->_('Show ') . 
					"<select class='limit' name='{$this->name}_show_limit}'>";

		$limits = array(
			0 => $this->_('All'),
			5 => '5',
			10 =>'10',
			15 => '15',
			25 => '25',
			50 => '50',
			75 => '75',
			100 => '100'
		);
			
		foreach ($limits as $value => $label) {				
			$limitSelect .='<option value="' . $value . '"' . ($lastLimit == $value ? 'selected="selected"' : '') . '>' . $label . '</option>';
		}

		$limitSelect .= '</select>'. $this->_(' Rows') . '</span></div>';

		return $limitSelect;

	}

	/**
	 * Process input for the ImageMarkers inputs.
	 *
	 * @access public
	 * 
	 */
	public function ___processInput(WireInputData $input) {

		if(!$this->page || !$this->field) {
			throw new WireException("This inputfield requires that you set valid 'page' and 'field' properties to it."); 
		}

		// prepare variables
		$name = $this->attr('name');
		$prefix = self::IM_PREFIX . $name;
		$post = $this->wire('input')->post;		
		$markerAddInfoPages = $prefix . '_marker_add_infopages';
		$markerAddInfoPagesSelect = $prefix . '_marker_add_infopages_select';
		$imageMarkers = $this->field->type->getBlankValue($this->page, $this->field); 
		$numDeleted = 0; 
		$duplicates = array();// to help remove duplicate info pages
		$deleted = array();// due to some js issues, to help remove deleted from being re-added as new items		

		// first we process existing values but first check if there's anything to process
		if(is_array($input->{"{$prefix}_info"}) && count($input->{"{$prefix}_info"})) {
			foreach($input->{"{$prefix}_info"} as $cnt => $info) {

				// check if the item is being deleted
				if($input->{"{$prefix}_del"}[$cnt]) {
					// if being deleted, then we simply skip over it
					$numDeleted++;
					$deleted[] = $info;
					continue;				
				}

				if(in_array($info, $duplicates)) continue;// skip duplicate info pages

				// create the $imageMarker and add it to our $imageMarkers
				$imageMarker = new ImageMarker();
				$imageMarker->info = $info; 
				$imageMarker->x = $input->{"{$prefix}_x"}[$cnt];
				$imageMarker->y = $input->{"{$prefix}_y"}[$cnt];
				$imageMarkers->add($imageMarker);

				$duplicates[] = $info;
			}
		}
		// second, we process newly added markers
		$addPages = $post->$markerAddInfoPages;
		// determine if using PageAutocomplete vs AsmSelect
		$addInfoPagesSelect = $post->$markerAddInfoPagesSelect;

		// if using PageAutocomplete to add info pages
		if($addInfoPagesSelect == 2) {
			// In the autocomplete select array, there is only one index with a string of numbers, e.g. ,1087,1364,7895 as a value
			$addPages = explode(",", $addPages[0]);
			// we remove the first item in the array since it will be an empty string.
			array_splice($addPages, 0, 1);
		}
		
		// check if we have anything to process
		if(is_array($addPages) && count($addPages)) {
			foreach ($addPages as $p) {				
				// skip duplicate info pages + those being deleted
				if(in_array($p, $duplicates) || in_array($p, $deleted)) continue;
				// create the $imageMarker and add it to our $imageMarkers
				$imageMarker = new ImageMarker();
				$imageMarker->info = $p; 
				$imageMarker->x = '';// set to nothing since new
				$imageMarker->y = '';// ditto
				$imageMarkers->add($imageMarker);
				$duplicates[] = $p;
			}
		}

		################

		// if the string values of the processed ImageMarkers are different from the previous,
		// or if any ImageMarkers have been deleted, then flag this Inputfield as changed
		// so that it will be automatically saved with the page
		if("$imageMarkers" != "$this->value" || $numDeleted) {
			$this->attr('value', $imageMarkers); 
			$this->trackChange('value'); 
		}
	}

}

